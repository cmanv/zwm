.\" Automatically generated by Pandoc 3.8
.\"
.TH "ZWM" "1" "September 2025" "zwm version alpha16" "zwm user\(aqs manual"
.SH NAME
zwm \(em a simple stacking / tiling window manager for X11
.SH SYNOPSIS
\f[B]zwm\f[R] [\-D display] [\-c configfile] [\-m socket] [\-t theme]
[\-hdpv]
.SH DESCRIPTION
\f[B]zwm\f[R] is an hybrid stacking/tiling window manager for X11.
It supports a stacking mode and 3 tiling modes.
It features a number of configurable window manager functions,
workspaces and a configurable menu.
It is also able to send and receive messages through sockets.
.SH COMMAND LINE OPTIONS
\f[B]\-D\f[R] \f[I]display\f[R]
.RS
.PP
Use \f[I]display\f[R] as the default X display.
.RE
.PP
\f[B]\-c\f[R] \f[I]configfile\f[R]
.RS
.PP
Use \f[I]configfile\f[R] as the configuration file.
.RE
.PP
\f[B]\-m\f[R] \f[I]socket\f[R]
.RS
.PP
Soecify a socket on which the window manager will send some status
messages.
This overrides any value defined in the configuration file.
If this is unset no messages are sent.
.RE
.PP
\f[B]\-t\f[R] \f[I]theme\f[R]
.RS
.PP
Use \f[I]theme\f[R] (dark/light) at startup.
\f[I]light\f[R] is the default.
.RE
.PP
\f[B]\-h\f[R]
.RS
.PP
Print brief usage information.
.RE
.PP
\f[B]\-d\f[R]
.RS
.PP
Send debug information to the standard output.
It can be used multiple times to increase verbosity.
.RE
.PP
\f[B]\-p\f[R]
.RS
.PP
Parse configuration file and exit.
.RE
.PP
\f[B]\-v\f[R]
.RS
.PP
Print the current version number.
.RE
.SH CONFIGURATION OPTIONS
This section describes all options that can be set in the configuration
file.
.SS GENERAL WINDOW MANAGER OPTIONS
.IP \(bu 2
\f[B]color\f[R] \f[I]element color1 color2\f[R]
.RS
.PP
Sets the color of the UI elements.
\f[I]color1\f[R] applies in light mode and \f[I]color2\f[R] applies in
dark mode.
.RE
.RS
.PP
The elements can be:
.RE
.RS
.PP
\f[I]menu\-background\f[R], \f[I]menu\-border\f[R],
\f[I]menu\-highlight\f[R], \f[I]menu\-item\-text\f[R],
\f[I]menu\-item\-text\-selected\f[R], \f[I]menu\-title\f[R],
\f[I]menu\-title\-background\f[R], \f[I]window\-border\-active\f[R],
\f[I]window\-border\-inactive\f[R], \f[I]window\-border\-urgent\f[R]
.RE
.IP \(bu 2
\f[B]debug\-level\f[R] \f[I]level\f[R]
.RS
.PP
A non zero value causes the window manager to print debug information on
the standard output.
Increasing its value increases verbosity.
(default: 0)
.RE
.IP \(bu 2
\f[B]desktop\-defaults\f[R] \f[I]number\f[R] \f[I]name\f[R]
\f[I]mode\f[R] \f[I]proportion\f[R]
.RS
.PP
Define the default name and tiling mode of the desktop_.
.RE
.RS
.IP \(bu 2
\f[I]number\f[R] is the desktop number from 1 to 10.
.IP \(bu 2
\f[I]name\f[R] is a string to identify the desktop.
.IP \(bu 2
\f[I]mode\f[R] can be any of:
.RE
.RS
.RS
.IP \(bu 2
\f[I]Stacked\f[R]: Windows are stacked and can be moved/resized by the
user.
.IP \(bu 2
\f[I]Monocle\f[R]: Only one window (maximized) is visible at a time.
.IP \(bu 2
\f[I]VTiled\f[R]: Master / slaves with the slaves tiled vertically on
the right.
.IP \(bu 2
\f[I]HTiled\f[R]: Master / slaves with the slaves tiled horizontally on
the bottom.
.IP \(bu 2
\f[I]RxC\f[R]: Windows are arranged in a grid of \f[I]R\f[R] rows and
\f[I]C\f[R] columns.
The number of rows and columns can be anywhere from 1 to 9.
.RE
.RE
.RS
.IP \(bu 2
\f[I]proportion\f[R] is the proportion of the screeen used by the master
window.
(HTiled/VTiled modes only)
.RE
.IP \(bu 2
\f[B]desktop\-modes\f[R] \f[I]mode1\f[R],_mode2,..
.RS
.PP
Define a comma separated list of active desktop modes.
The order is used to rotate mode with the functions
\f[I]desktop\-mode\-next\f[R] and \f[I]desktop\-mode\-prev\f[R].
.RE
.RS
.PP
Default is : Stacked,Monocle,VTiled,HTiled
.RE
.IP \(bu 2
\f[B]message\-socket\f[R] \f[I][host:port|path]\f[R]
.RS
.PP
Specifies a TCP socket or UNIX domain socket to which the window manager
will connect to send IPC messages.This can be overriden by a command
line argument.
(default is unset)
.RE
.IP \(bu 2
\f[B]menu\-font\f[R] \f[I]font\f[R]
.RS
.PP
Sets the font of the text in menus.
(default: \(dqMono:size=10\(dq)
.RE
.IP \(bu 2
\f[B]menu\-client\-label\f[R] \f[I]text\f[R]
.RS
.PP
Sets the label of the client menu.
(default is \(dqX Clients\(dq)
.RE
.IP \(bu 2
\f[B]menu\-desktop\-label\f[R] \f[I]text\f[R]
.RS
.PP
Sets the label of the active desktops menu.
(default is \(dqActive desktops\(dq)
.RE
.IP \(bu 2
\f[B]menu\-launcher\-label\f[R] \f[I]text\f[R]
.RS
.PP
Sets the label of the launcher menu.
(default is \(dqLaunchers\(dq).
To define the launcher menu, see the \f[I]MENU DEFINITIONS\f[R] section.
.RE
.IP \(bu 2
\f[B]screen\-border\-gap\f[R] \f[I]top bottom left right\f[R]
.RS
.PP
Reserves space at the edges of the screen.
This space will not be used for tiling windows by the window manager.
(default: 1 1 1 1)
.RE
.IP \(bu 2
\f[B]shutdown\-script\f[R] \f[I]path\f[R]
.RS
.PP
Defines a script that is to be run when the window manager terminates.
(default is unset)
.RE
.IP \(bu 2
\f[B]startup\-script\f[R] \f[I]path\f[R]
.RS
.PP
Defines a script that is to be run when the window manager starts.
(default is unset)
.RE
.IP \(bu 2
\f[B]terminal\f[R] \f[I]path\f[R]
.RS
.PP
Define the default terminal program.
(default is \(dqxterm\(dq)
.RE
.IP \(bu 2
\f[B]window\-stacked\-border\f[R] \f[I]width\f[R]
.RS
.PP
Specifies the border width of stacked windows.
(default: 7)
.RE
.IP \(bu 2
\f[B]window\-tiled\-border\f[R] \f[I]width\f[R]
.RS
.PP
Specifies the border width of tiled windows.
(default: 2)
.RE
.SS PER APPLICATION OPTIONS
These are options to set the default desktop and default states of an
application based on its \f[I]instance\f[R]/\f[I]class\f[R] properties.
.IP \(bu 2
\f[B]app\-default\-desktop\f[R] \f[I]instance:class number\f[R]
.RS
.PP
Use this configuration option to specify that an application with class
\f[I]instance:class\f[R] is to open on the desktop \f[I]number\f[R].
.RE
.IP \(bu 2
\f[B]app\-default\-state\f[R] \f[I]instance:class\f[R]\ \f[I]state1\f[R]
[,\f[I]state2\f[R] ..,\f[I]stateN\f[R]]
.RS
.PP
Set the default state of an application with instance/class
\f[I]instance:class\f[R].
The applicable states are:
.RE
.RS
.IP \(bu 2
\f[I]docked\f[R]: Equivalent to
\f[I]frozen\f[R],\f[I]sticky\f[R],\f[I]ignore\f[R],\f[I]noborder\f[R].
Any client with the property \f[I]_NET_WM_WINDOW_TYPE_DOCK\f[R] will
have this state set.
.RE
.RS
.IP \(bu 2
\f[I]frozen\f[R]: The window is locked at its current position.
.RE
.RS
.IP \(bu 2
\f[I]ignored\f[R]: Do not add the window to the task list or the window
list.
.RE
.RS
.IP \(bu 2
\f[I]noborder\f[R]: The window has no border (\f[I]stacked\f[R] windows
only).
.RE
.RS
.IP \(bu 2
\f[I]noresize\f[R]: The window cannot be resized (\f[I]stacked\f[R]
windows only).
.RE
.RS
.IP \(bu 2
\f[I]notile\f[R]: The window is never tiled.
.RE
.RS
.IP \(bu 2
\f[I]sticky\f[R]: The window appears on all desktops.
.RE
.SS MENU DEFINITIONS
These options allows to define a menu hierarchy that can be activated by
the \f[I]menu\-launcher\f[R] function.
The label of the top level menu must match the
\f[I]menu\-launcher\-label\f[R] option.
(Default: \(dqLaunchers\(dq)
.PP
Any menu can contains a list of commands and submenus.
A menu definition starts by \f[I]menu\-start\f[R] statement, followed by
a list of \f[I]menu\-item\f[R] statements, and ends with a
\f[I]menu\-end\f[R] stetement.
.RS
.PP
\f[I]menu\-start\f[R] \f[I]text\f[R]
.RE
.RS
.PP
\f[I]menu\-item\f[R] \f[I]text\f[R] \f[I]function\f[R] [\f[I]arg\f[R]]
.RE
.RS
.PP
,,,
.RE
.RS
.PP
\f[I]menu\-end\f[R]
.RE
.IP \(bu 2
\f[B]menu\-start\f[R] \f[I]text\f[R]
.RS
.PP
Starts the definition of a menu with label \f[I]text\f[R].
This must be followed by a series of \f[I]menu\-item\f[R] lines and end
with a \f[I]menu\-end\f[R] line.
.RE
.IP \(bu 2
\f[B]menu\-item\f[R] \f[I]text function [arg]\f[R]
.RS
.PP
Define an item in a menu.
The \f[I]text\f[R] is the label of the menu item.
The \f[I]function\f[R] and \f[I]arg\f[R] are usually one of these:
.RE
.RS
.IP \(bu 2
\f[I]exec\f[R] \f[I]path\f[R]: Execute the program at the specified
\f[I]path\f[R].
.RE
.RS
.IP \(bu 2
\f[I]menu\f[R] \f[I]text\f[R]: Open a menu as a submenu.
\f[I]text\f[R] is the label of a defined menu.
.RE
.RS
.IP \(bu 2
\f[I]quit\f[R]: Terminates the window manager application.
.RE
.RS
.IP \(bu 2
\f[I]restart\f[R]: Restarts the window manager application.
Any changes in the configuration file will be applied.
.RE
.IP \(bu 2
\f[B]menu\-end\f[R]
.RS
.PP
Ends the definition of the menu.
.RE
.SS BINDING OPTIONS
These options allow to bind or unbind a key/buttpn shortcut to a window
manager function.
A binding consists of a set of modifier keys and a regular key or button
mouse.
Any combination of these modifiers are allowed:
.RS
.IP \(bu 2
\f[B]C\f[R] for the Control key
.IP \(bu 2
\f[B]M\f[R] for the Alt key
.IP \(bu 2
\f[B]4\f[R] for the Super (Windows) key
.IP \(bu 2
\f[B]S\f[R] for the Shift key
.RE
.PP
The bindings options are:
.IP \(bu 2
\f[B]bind\-key\f[R] \f[I]modifiers\-key function\f[R]
.RS
.PP
Bind a key pressed with modifiers to a window manager function.
.RE
.IP \(bu 2
\f[B]bind\-mouse\f[R] \f[I]modifiers\-button function\f[R]
.RS
.PP
Bind a mouse button clicked with modifiers to a window manager function.
.RE
.IP \(bu 2
\f[B]unbind\-key\f[R] \f[I]modifiers\-key\f[R]
.RS
.PP
Unassigns a particular modifiers/key combination.
The special form \f[I]unbind_key all\f[R] clears all previously defined
key bindings.
.RE
.IP \(bu 2
\f[B]unbind\-mouse\f[R] \f[I]modifiers\-button\f[R]
.RS
.PP
Unassigns a particular modifiers/button combination.
The special form \f[I]unbind_mouse all\f[R] clears all previously
defined mouse bindings.
.RE
.SH WINDOW MANAGER FUNCTIONS
This sections list all window manager functions that can be accessed
through a key or mouse binding.
.IP \(bu 2
\f[B]desktop\-close\f[R]: Close all windows on the desktop.
.IP \(bu 2
\f[B]desktop\-hide\f[R]: Hide all windows on the desktop.
.IP \(bu 2
\f[B]desktop\-client\-menu\f[R]: Show the list of X11 clients.
(keyboard driven).
.IP \(bu 2
\f[B]desktop\-desktop\-menu\f[R]: Show the list of active desktops.
(keyboard driven).
.IP \(bu 2
\f[B]desktop\-launcher\-menu\f[R]: Show the launcher menu.
(keyboard driven).
.IP \(bu 2
\f[B]desktop\-mode\-{\f[BI]number\f[B]}\f[R]: Switch to mode
\f[I]number\f[R] (1\-9).
The \f[I]number\f[R] refers to the order of appearance of the mode in
**\f[I]desktop\f[R]modes_**.
.IP \(bu 2
\f[B]desktop\-mode\-next\f[R]: Switch the desktop to the next tiling
mode in the order defined by \f[I]desktop\-modes\f[R].
.IP \(bu 2
\f[B]desktop\-mode\-prev\f[R]: Switch the desktop to the previous tiling
mode in ther order defined by \f[I]desktop\-modes\f[R].
.IP \(bu 2
\f[B]desktop\-set\-dark\-theme\f[R]: Switch the window manager colors to
the dark theme.
.IP \(bu 2
\f[B]desktop\-set\-light\-theme\f[R]: Switch the window manager colors
to the light theme.
.IP \(bu 2
\f[B]desktop\-switch\-{\f[BI]number\f[B]}\f[R]: Go to desktop
\f[I]number\f[R].
.IP \(bu 2
\f[B]desktop\-switch\-last\f[R]: Move back to the last used desktop.
.IP \(bu 2
\f[B]desktop\-switch\-next\f[R]: Go to the next active desktop.
Last desktop wraps to first.
.IP \(bu 2
\f[B]desktop\-switch\-prev\f[R]: Go to the previous active desktop.
First desktop wraps to last.
.IP \(bu 2
\f[B]desktop\-window\-focus\-next\f[R]: Move the focus to the next
window.
(All modes except Monocle)
.IP \(bu 2
\f[B]desktop\-window\-focus\-prev\f[R]: Move the focus to the previous
window.
(All modes except Monocle)
.IP \(bu 2
\f[B]desktop\-window\-master\-decr\f[R]: Decrease the proportion of the
screen occupied by the master window.
(HTiled, VTIled)
.IP \(bu 2
\f[B]desktop\-window\-master\-incr\f[R]: Increase the proportion of the
screen occupied by the master window.
(HTiled, VTIled)
.IP \(bu 2
\f[B]desktop\-window\-rotate\-next\f[R]: Rotate the position of the
windows counterclockwise while keeping the focus at the same position.
(All tiled modes)
.IP \(bu 2
\f[B]desktop\-window\-rotate\-prev\f[R]: Rotate the position of the
windows clockwise while keeping the focus at the same position.
(All tiled modes)
.IP \(bu 2
\f[B]desktop\-window\-swap\-next\f[R]: Swap the position of the active
window and the next window.
(HTiled, VTiled)
.IP \(bu 2
\f[B]desktop\-window\-swap\-prev\f[R]: Swap the position of the active
window and the previous window.
(HTiled, VTiled)
.IP \(bu 2
\f[B]exec\f[R] \f[I]path\f[R]: Execute a program defined by
\f[I]path\f[R].
.IP \(bu 2
\f[B]client\-menu\f[R]: Shows the list of X clients (pointer driver).
.IP \(bu 2
\f[B]desktop\-menu\f[R]: Show the list of active desktops (pointer
driven).
.IP \(bu 2
\f[B]launcher\-menu\f[R]: Show the launcher menu.
(pointer driven).
.IP \(bu 2
\f[B]quit\f[R]: Terminate the window manager.
.IP \(bu 2
\f[B]restart\f[R]: Restart the window manager.
.IP \(bu 2
\f[B]terminal\f[R]: Open the default terminal.
.IP \(bu 2
\f[B]window\-close\f[R]: Close the current window.
.IP \(bu 2
\f[B]window\-hide\f[R]: Hide the current window.
.IP \(bu 2
\f[B]window\-lower\f[R]: Lower the position of the current window in the
stack.
(\f[I]stacked\f[R] windows only).
.IP \(bu 2
\f[B]window\-move\f[R]: Move the current window with the pointer.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-move\-down\f[R]: Move the current window toward to the
bottom of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-move\-left\f[R]: Move the current window toward to the left
of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-move\-right\f[R]: Move the current window toward to the
right of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-move\-up\f[R]: Move the current window toward to the top of
the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-move\-to\-desktop\-{\f[BI]number\f[B]}\f[R]: Move the
current window to the desktop \f[I]number\f[R].
.IP \(bu 2
\f[B]window\-raise\f[R]: Moves the current window to the top the stack.
(\f[I]stacked\f[R] windows only).
.IP \(bu 2
\f[B]window\-resize\f[R]: Resize the current window with the pointer.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-resize\-down\f[R]: Resize the current window toward the
bottom.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-resize\-left\f[R]: Resize the current window toward the
left.
(\f[I]stacked\f[R] window only)
.IP \(bu 2
\f[B]window\-resize\-right\f[R]: Resize the current window toward the
right.
(\f[I]stacked\f[R] window only)
.IP \(bu 2
\f[B]window\-resize\-up\f[R]: Resize the current window toward the top.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-snap\-down\f[R]: Snap the current window to the bottom edge
of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-snap\-left\f[R]: Snap the current window to the left edge
of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-snap\-up\f[R]: Snap the current window to the top edge of
the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-snap\-right\f[R]: Snap the current window to the right edge
of the screen.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-toggle\-fullscreen\f[R]: Toggle the fullscreen state of the
current window.
.IP \(bu 2
\f[B]window\-toggle\-sticky\f[R]: Toggle the \f[I]sticky\f[R] state of
the current window.
(\f[I]stacked\f[R] windows only)
.IP \(bu 2
\f[B]window\-toggle\-tiled\f[R]: Toggle the
\f[I]tiled\f[R]/\f[I]stacked\f[R] state of the current window.
Switching off the \f[I]stacked\f[R] state also switch off the
\f[I]sticky\f[R] state.
.SH DEFAULT BINDINGS
This sections list all key and mouse bindings defined by default.
.SS Key bindings
.IP \(bu 2
\f[B]C\-Return\f[R] : \f[I]terminal\f[R]
.IP \(bu 2
\f[B]CM\-r\f[R] : \f[I]restart\f[R]
.IP \(bu 2
\f[B]CM\-q\f[R] : \f[I]quit\f[R]
.IP \(bu 2
\f[B]M\-1\f[R] : \f[I]desktop\-mode\-1\f[R]
.IP \(bu 2
\f[B]M\-2\f[R] : \f[I]desktop\-mode\-2\f[R]
.IP \(bu 2
\f[B]M\-3\f[R] : \f[I]desktop\-mode\-3\f[R]
.IP \(bu 2
\f[B]M\-4\f[R] : \f[I]desktop\-mode\-4\f[R]
.IP \(bu 2
\f[B]M\-Up\f[R] : \f[I]desktop\-mode\-next\f[R]
.IP \(bu 2
\f[B]M\-Down\f[R] : \f[I]desktop\-mode\-prev\f[R]
.IP \(bu 2
\f[B]CM\-1\f[R] : \f[I]desktop\-switch\-1\f[R]
.IP \(bu 2
\f[B]CM\-2\f[R] : \f[I]desktop\-switch\-2\f[R]
.IP \(bu 2
\f[B]CM\-3\f[R] : \f[I]desktop\-switch\-3\f[R]
.IP \(bu 2
\f[B]CM\-4\f[R] : \f[I]desktop\-switch\-4\f[R]
.IP \(bu 2
\f[B]CM\-5\f[R] : \f[I]desktop\-switch\-5\f[R]
.IP \(bu 2
\f[B]CM\-6\f[R] : \f[I]desktop\-switch\-6\f[R]
.IP \(bu 2
\f[B]CM\-7\f[R] : \f[I]desktop\-switch\-7\f[R]
.IP \(bu 2
\f[B]CM\-8\f[R] : \f[I]desktop\-switch\-8\f[R]
.IP \(bu 2
\f[B]CM\-9\f[R] : \f[I]desktop\-switch\-9\f[R]
.IP \(bu 2
\f[B]CM\-0\f[R] : \f[I]desktop\-switch\-10\f[R]
.IP \(bu 2
\f[B]CM\-Right\f[R] : \f[I]desktop\-switch\-next\f[R]
.IP \(bu 2
\f[B]CM\-Left\f[R] : \f[I]desktop\-switch\-prev\f[R]
.IP \(bu 2
\f[B]M\-Tab\f[R] : \f[I]desktop\-window\-focus\-next\f[R]
.IP \(bu 2
\f[B]SM\-Tab\f[R] : \f[I]desktop\-window\-focus\-prev\f[R]
.IP \(bu 2
\f[B]M\-greater\f[R] : \f[I]desktop\-window\-master\-incr\f[R]
.IP \(bu 2
\f[B]M\-less\f[R] : \f[I]desktop\-window\-master\-decr\f[R]
.IP \(bu 2
\f[B]SM\-Right\f[R] : \f[I]desktop\-window\-rotate\-next\f[R]
.IP \(bu 2
\f[B]SM\-Left\f[R] : \f[I]desktop\-window\-rotate\-prev\f[R]
.IP \(bu 2
\f[B]M\-Right\f[R] : \f[I]desktop\-window\-swap\-next\f[R]
.IP \(bu 2
\f[B]M\-Left\f[R] : \f[I]desktop\-window\-swap\-prev\f[R]
.IP \(bu 2
\f[B]SM\-1\f[R] : \f[I]window\-move\-to\-desktop\-1\f[R]
.IP \(bu 2
\f[B]SM\-2\f[R] : \f[I]window\-move\-to\-desktop\-2\f[R]
.IP \(bu 2
\f[B]SM\-3\f[R] : \f[I]window\-move\-to\-desktop\-3\f[R]
.IP \(bu 2
\f[B]SM\-4\f[R] : \f[I]window\-move\-to\-desktop\-4\f[R]
.IP \(bu 2
\f[B]SM\-5\f[R] : \f[I]window\-move\-to\-desktop\-5\f[R]
.IP \(bu 2
\f[B]SM\-6\f[R] : \f[I]window\-move\-to\-desktop\-6\f[R]
.IP \(bu 2
\f[B]SM\-7\f[R] : \f[I]window\-move\-to\-desktop\-7\f[R]
.IP \(bu 2
\f[B]SM\-8\f[R] : \f[I]window\-move\-to\-desktop\-8\f[R]
.IP \(bu 2
\f[B]SM\-9\f[R] : \f[I]window\-move\-to\-desktop\-9\f[R]
.IP \(bu 2
\f[B]SM\-0\f[R] : \f[I]window\-move\-to\-desktop\-10\f[R]
.IP \(bu 2
\f[B]M\-h\f[R] : \f[I]window\-move\-left\f[R]
.IP \(bu 2
\f[B]M\-l\f[R] : \f[I]window\-move\-right\f[R]
.IP \(bu 2
\f[B]M\-j\f[R] : \f[I]window\-move\-up\f[R]
.IP \(bu 2
\f[B]M\-k\f[R] : \f[I]window\-move\-down\f[R]
.IP \(bu 2
\f[B]SM\-h\f[R] : \f[I]window\-resize\-left\f[R]
.IP \(bu 2
\f[B]SM\-l\f[R] : \f[I]window\-resize\-right\f[R]
.IP \(bu 2
\f[B]SM\-j\f[R] : \f[I]window\-resize\-up\f[R]
.IP \(bu 2
\f[B]SM\-k\f[R] : \f[I]window\-resize\-down\f[R]
.IP \(bu 2
\f[B]CM\-h\f[R] : \f[I]window\-snap\-left\f[R]
.IP \(bu 2
\f[B]CM\-l\f[R] : \f[I]window\-snap\-right\f[R]
.IP \(bu 2
\f[B]CM\-j\f[R] : \f[I]window\-snap\-up\f[R]
.IP \(bu 2
\f[B]CM\-k\f[R] : \f[I]window\-snap\-down\f[R]
.IP \(bu 2
\f[B]SM\-f\f[R] : \f[I]window\-toggle\-fullscreen\f[R]
.IP \(bu 2
\f[B]SM\-s\f[R] : \f[I]window\-toggle\-sticky\f[R]
.IP \(bu 2
\f[B]SM\-t\f[R] : \f[I]window\-toggle\-tiled\f[R]
.IP \(bu 2
\f[B]SM\-i\f[R] : \f[I]window\-hide\f[R]
.IP \(bu 2
\f[B]SM\-x\f[R] : \f[I]window\-close\f[R]
.SS Mouse buttons bindings
.IP \(bu 2
\f[B]1\f[R] : \f[I]client\-menu\f[R]
.IP \(bu 2
\f[B]2\f[R] : \f[I]desktop\-menu\f[R]
.IP \(bu 2
\f[B]3\f[R] : \f[I]launcher\-menu\f[R]
.IP \(bu 2
\f[B]M+1\f[R]: \f[I]window\-move\f[R]
.IP \(bu 2
\f[B]M+3\f[R]: \f[I]window\-resize\f[R]
.IP \(bu 2
\f[B]M+4\f[R]: \f[I]window\-lower\f[R]
.IP \(bu 2
\f[B]M+5\f[R]: \f[I]window\-raise\f[R]
.SH SOCKETS
This section describes the use of sockets by the window manager.
.SS Command socket:
Commands can be sent programmatically to the window manager through a
UNIX socket.
This socket is located at $XDG_CACHE_HOME/zwm/socket
.PP
All window manager desktop functions are accepted.
These are the functions starting with \(dqdesktop\-\(dq.
.PP
The accepted format of the command is:
\(dq\f[I]screen\f[R]:\f[I]function\f[R]\(dq, where:
.IP \(bu 2
\f[I]screen\f[R] is the applicable X screen number
.IP \(bu 2
\f[I]function\f[R] the name of the window manager function.
.PP
Any message not complying with the format will be ignored.
.SS Message socket:
The window manager can send status messages to a UNIX socket.
This can be useful for some programs such as status bars.
.PP
This is the list of messages that can be sent by the window manager:
.IP \(bu 2
\f[I]window_active=\(dqcurrent title of active windowa\(dq\f[R]
.RS
.PP
Sent when there is a change of active window title.
.RE
.IP \(bu 2
\f[I]no_window_active=\f[R]
.RS
.PP
Sent when there is no longer an active window.on the desktop.
.RE
.IP \(bu 2
\f[I]desktop_name=\(dqdesktop name\(dq\f[R]
.RS
.PP
Sent when the active desktop has changed.
.RE
.IP \(bu 2
\f[I]desktop_mode=\(dqdesktop mode\(dq\f[R]
.RS
.PP
Sent when the desktop mode has changed.
.RE
.IP \(bu 2
\f[I]desktop_list=\(dqspace separated list of desktops numbers\(dq\f[R]
.RS
.PP
Sent where there is a change in the list of active desktops.
The active desktop number is prepended by a \(aq*\(aq in the list.
.RE
.PP
To activate this feature, set \f[I]message\-socket\f[R] to the path of
the destination socket in the configuration file.
Alternatively, use the \f[I]\-m\f[R] command line option to specify its
value.
If used, the command line option overrides the value defined in the
configuration file.
.SH FILES
If not specified at the command line, the configuration file
\f[I]\(ti/.config/zwm/config\f[R] is read at startup.
.SH BUGS
See GitHub Issues: \c
.UR https://github.com/cmanv/zwm/issues
.UE \c
.SH AUTHORS
cmanv.
