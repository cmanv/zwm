.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "ZWM" "1" "August 2025" "zwm version alpha13" "zwm user\(aqs manual"
.SH NAME
zwm \(em dynamic tiling window manager for X11
.SH SYNOPSIS
\f[B]zwm\f[R] [OPTIONS]
.SH DESCRIPTION
\f[B]zwm\f[R] is a dynamic tiling window manager for X11.
It features a number of configurable keyboards control functions,
workspaces and a configurable menu.
It is also able to send and receive messages through sockets.
.SH COMMAND LINE OPTIONS
\f[B]\-c\f[R] \f[I]filename\f[R]
.RS
.PP
Use \f[I]filename\f[R] as configuration file.
.RE
.PP
\f[B]\-d\f[R]
.RS
.PP
Send debug information to the standard output.
It can be used multiple times to increase verbosity.
.RE
.PP
\f[B]\-D\f[R] \f[I]display\f[R]
.RS
.PP
Use \f[I]display\f[R] as default X display.
.RE
.PP
\f[B]\-s\f[R] \f[I]command\f[R]socket_
.RS
.PP
Soecify a socket for sending commands to the window manager.
This overrides any value defined in the configuration file.
.RE
.PP
\f[B]\-m\f[R] \f[I]message\f[R]socket_
.RS
.PP
Soecify a socket on which the window manager will send some status
messages.
This overrides any value defined in the configuration file.
.RE
.PP
\f[B]\-h\f[R]
.RS
.PP
Prints brief usage information.
.RE
.PP
\f[B]\-p\f[R]
.RS
.PP
Only parse configuration file and exit.
.RE
.PP
\f[B]\-v\f[R]
.RS
.PP
Prints the current version number.
.RE
.SH CONFIGURATION OPTIONS
This section describe all options that can be set in the configuration
files.
.SS GENERAL OPTIONS
.IP \(bu 2
\f[B]screen\-border\-gap\f[R] \f[I]top bottom left right\f[R]
.RS
.PP
Sets reserved spaces at the edges of the screen.
This space will not be used for tiling windows by the window manager.
(default: 1 1 1 1)
.RE
.IP \(bu 2
\f[B]client\-socket\f[R] \f[I][hoat:port|path]\f[R]
.RS
.PP
Specify an opened TCP socket or UNIX domain socket to which the window
manager will connect to send IPC messages.
It overrides the value of WM_CLIENT_SOCKET if it has been set in the
environment.
(default: unset)
.RE
.IP \(bu 2
\f[B]debug\-level\f[R] \f[I]level\f[R]
.RS
.PP
A non zero value causes the window manager to print debug information on
the standard output.
Increasing its value increases verbosity.
(default: 0)
.RE
.IP \(bu 2
\f[B]desktop\f[R] \f[I]num name mode\f[R]
.RS
.PP
Sets the default name and tiling mode of the desktop\f[I].
\f[R]num_ goes from 1 to 10 \f[I]name\f[R] is a string to identify the
desktop.
\f[I]mode\f[R] can be any of: \f[I]vtile\f[R], \f[I]htile\f[R] or
\f[I]monocle\f[R].
(default: \f[I]vtile\f[R])
.RE
.IP \(bu 2
\f[B]desktop\-modes\f[R] \f[I]mode1\f[R],_mode2,..
.RS
.PP
Sets a comma separated list of active desktop modes.
The order is used to rotate mode with the functions
\f[I]desktop\f[R]mode\f[I]next\f[R] and
\f[I]desktop\f[R]mode\f[I]prev\f[R] The list of currently valid modes
is:
.RS
.PP
\f[I]Stacked\f[R] : Windows are stacked and can be moved/resized by the
user.
\f[I]Monocle\f[R] : Only one window (maximized) is visible at a time.
\f[I]Vtile\f[R] : Master / slaves with the slaves tiled vertically on
the right.
\f[I]Htile\f[R] : Master / slaves with the slaves tiled horizontally on
the bottom.
.RE
.RE
.IP \(bu 2
\f[B]server\-socket\f[R] \f[I][host:port|path]\f[R]
.RS
.PP
Sets up a listening socket which can be a UNIX domain socket or a tcp
socket.
This allows sending message to the window manager to execute functions.
This overrides the value of WM_SERVER_SOCKET if it has been defined in
the environment.
(default is unset)
.RE
.IP \(bu 2
\f[B]shutdown\-script\f[R] \f[I]path\f[R]
.RS
.PP
Defines a script that is to be run when the window manager terminates.
(default is unset)
.RE
.IP \(bu 2
\f[B]startup\-script\f[R] \f[I]path\f[R]
.RS
.PP
Defines a script that is to be run when the window manager starts.
(default is unset)
.RE
.IP \(bu 2
\f[B]terminal\f[R] \f[I]path\f[R]
.RS
.PP
Defines the default terminal program.
(default is \(dqxterm\(dq)
.RE
.SS WINDOWS OPTIONS
.IP \(bu 2
\f[B]window\-stacked\-border\f[R] \f[I]width\f[R]
.RS
.PP
Specifies the border width of stacked windows.
(default: 5)
.RE
.IP \(bu 2
\f[B]window\-tiled\-border\f[R] \f[I]width\f[R]
.RS
.PP
Specifies the border width of tiled windows.
(default: 2)
.RE
.IP \(bu 2
\f[B]color\f[R] \f[I]element color\f[R]
.RS
.PP
Sets the color of the windows border.
.RE
.RS
.RS
.PP
\f[I]window\-border\-active\f[R] \f[I]window\-border\-inactive\f[R]
\f[I]window\-border\-urgent\f[R]
.RE
.RE
.SS MENU OPTIONS
.IP \(bu 2
\f[B]color\f[R] \f[I]element color\f[R]
.RS
.PP
Sets the color of various UI elements.
.RE
.RS
.RS
.PP
\f[I]menu\-background\f[R] \f[I]menu\-border\f[R] \f[I]menu\-text\f[R]
\f[I]menu\-text\-selected\f[R] \f[I]menu\-text\-highlight\f[R]
\f[I]menu\-highlight\f[R] \f[I]menu\-title\f[R]
\f[I]menu\-title\-background\f[R]
.RE
.RE
.IP \(bu 2
\f[B]menu\-font\f[R] \f[I]font\f[R]
.RS
.PP
Sets the font of the text in menus.
(default: \(dqMono:size=10\(dq)
.RE
.IP \(bu 2
\f[B]menu\-start\f[R] \f[I]text\f[R]
.RS
.PP
Starts the definition of a menu with title \f[I]text\f[R].
This must be followed by a series of \f[I]menu\-item\f[R] lines and end
with a \f[I]menu\-end\f[R] line.
.RE
.IP \(bu 2
\f[B]menu\-item\f[R] \f[I]text [function [arg]]\f[R]
.RS
.PP
Define an item in a menu.
The \f[I]text\f[R] is what appears in the menu.
The \f[I]function\f[R] and \f[I]arg\f[R] can be any window manager
function, but usually one of these:
.RE
.RS
.RS
.PP
\f[I]exec\f[R] \f[I]path\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Execute the program at the specified \f[I]path\f[R].
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]menu\f[R] \f[I]text\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Open a menu as a submenu.
The \f[I]text\f[R] is the title of a defined menu.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]quit\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Terminates the window manager application.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]restart\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Restarts the window manager application.
Any changes in the configuration file will be applied.
.RE
.RE
.RE
.IP \(bu 2
\f[B]menu\-end\f[R]
.RS
.PP
Ends the definition of the menu.
.RE
.IP \(bu 2
\f[B]menu\-launcher\-title\f[R] \f[I]text\f[R]
.RS
.PP
Sets the title of the launcher menu.
(default is \(dqApplications\(dq).
.RE
.IP \(bu 2
\f[B]menu\-desktop\-title\f[R] \f[I]text\f[R]
.RS
.PP
Sets the title of the active desktops menu.
(default is \(dqActive desktops\(dq)
.RE
.IP \(bu 2
\f[B]menu\-client\-title\f[R] \f[I]text\f[R]
.RS
.PP
Sets the title of the client menu.
(default is \(dqClients\(dq)
.RE
.SS APPLICATION OPTIONS
.IP \(bu 2
\f[B]default\-desktop\f[R] \f[I]appclass num\f[R]
.RS
.PP
Use this configuration option to specify that an application with class
\f[I]appclass\f[R] is to open on desktop \f[I]num\f[R] (1\-10).
.RE
.IP \(bu 2
\f[B]window\-state\f[R] \f[I]appclass\f[R]\ \f[I]state1\f[R]
[,\f[I]state2\f[R] ..,\f[I]stateN\f[R]]
.RS
.PP
Set the default state of an application with class \f[I]appclaas\f[R].
The applicable states are:
.RE
.RS
.RS
.PP
\f[I]docked\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Equivalent to
\f[I]frozen\f[R],\f[I]sticky\f[R],\f[I]ignore\f[R],\f[I]noborder\f[R].
Any client with the property \f[I]_NET_WM_WINDOW_TYPE_DOCK\f[R] will
have this state set.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]frozen\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
The window is locked at its current position.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]ignored\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
Do not add the window to the task list or the window list.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]noborder\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
The window has no border (\f[I]stacked\f[R] windows only).
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]noresize\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
The window cannot be resized (applicable to \f[I]stacked\f[R] windows
only).
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]notile\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
The window is never tiled.
.RE
.RE
.RE
.RS
.RS
.PP
\f[I]sticky\f[R]
.RE
.RE
.RS
.RS
.RS
.PP
The window appears on all desktops.
.RE
.RE
.RE
.SS BINDING OPTIONS
.IP \(bu 2
\f[B]bind\-key\f[R] \f[I]modifiers\-key function\f[R]
.RS
.PP
Bind a key pressed with modifiers to a window manager function.
Modifiers include:
.RE
.RS
.RS
.PP
\f[I]C\f[R] for the Control key \f[I]M\f[R] for the Alt key \f[I]4\f[R]
for the Super (Windows) key \f[I]S\f[R] for the Shift key
.RE
.RE
.IP \(bu 2
\f[B]bind\-mouse\f[R] \f[I]modifiers\-button function\f[R]
.RS
.PP
Bind a mouse button click with modifiers to a window manager function.
\f[I]C\f[R],\f[I]M\f[R]\(aq\f[I]4\f[R],\f[I]S\f[R] are the applicable
modifiers.
.RE
.IP \(bu 2
\f[B]unbind\-key\f[R] \f[I]modifiers\-key\f[R]
.RS
.PP
Unassigns a particular modifiers/key combination.
The special form \f[I]unbind_key all\f[R] clears all key bindings
defined in the window manager.
.RE
.IP \(bu 2
\f[B]unbind\-mouse\f[R] \f[I]modifiers\-button\f[R]
.RS
.PP
Unassigns a particular modifiers/button combination.
.RE
.SH WINDOW MANAGER FUNCTIONS
This sections list all window manager functions that can be accessed
through a key or mouse binding.
.IP \(bu 2
\f[B]terminal\f[R]
.RS
.PP
Open the default terminal.
.RE
.IP \(bu 2
\f[B]exec\f[R] \f[I]path\f[R]
.RS
.PP
Execute a program defined by \f[I]path\f[R].
.RE
.IP \(bu 2
\f[B]restart\f[R]
.RS
.PP
Restart the window manager.
.RE
.IP \(bu 2
\f[B]quit\f[R]
.RS
.PP
Terminate the window manager.
.RE
.IP \(bu 2
\f[B]desktop\-close\f[R]
.RS
.PP
Close all windows on the desktop.
.RE
.IP \(bu 2
\f[B]desktop\-hide\f[R]
.RS
.PP
Hide all windows on the desktop.
.RE
.IP \(bu 2
\f[B]desktop\-last\f[R]
.RS
.PP
Move to the last desktop.
.RE
.IP \(bu 2
\f[B]desktop\-master\-decr\f[R]
.RS
.PP
Decrease the proportion of the screen occupied by the master window.
(HTiled,VTIled)
.RE
.IP \(bu 2
\f[B]desktop\-master\-incr\f[R]
.RS
.PP
Increase the proportion of the screen occupied by the master window.
(HTiled,VTIled)
.RE
.IP \(bu 2
\f[B]desktop\-mode\-stacked\f[R]
.RS
.PP
Switch to the desktop stacked mode.
(Stacked)
.RE
.IP \(bu 2
\f[B]desktop\-mode\-monocle\f[R]
.RS
.PP
Switch to the desktop monocle mode.
(Monocle)
.RE
.IP \(bu 2
\f[B]desktop\-mode\-htile\f[R]
.RS
.PP
Switch to the master/slave horizontal tiling mode.
(HTiled)
.RE
.IP \(bu 2
\f[B]desktop\-mode\-vtile\f[R]
.RS
.PP
Switch to the master/slave vertital tiling mode.
(VTile)
.RE
.IP \(bu 2
\f[B]desktop\-mode\-next\f[R]
.RS
.PP
Switch to the next desktop tiling mode in the order defined by
\f[I]desktop\f[R]modes_.
.RE
.IP \(bu 2
\f[B]desktop\-mode\-prev\f[R]
.RS
.PP
Switch to the previous desktop tiling mode in ther order defined by
\f[I]desktop\f[R]modes_..
.RE
.IP \(bu 2
\f[B]desktop\-next\f[R]
.RS
.PP
Change to the next desktop.
Desktop 1 follows desktop 10.
.RE
.IP \(bu 2
\f[B]desktop\-prev\f[R]
.RS
.PP
Change to the previous desktop.
Desktop 10 follows desktop 1.
.RE
.IP \(bu 2
\f[B]desktop\-rotate\-next\f[R]
.RS
.PP
Rotate the position of the tiled windows counterclockwise.
.RE
.IP \(bu 2
\f[B]desktop\-rotate\-prev\f[R]
.RS
.PP
Rotate the position of the tiled windows clockwise.
.RE
.IP \(bu 2
\f[B]desktop\-select\-\f[BI]num\f[B]\f[R]
.RS
.PP
Move to desktop \f[I]num\f[R]
.RE
.IP \(bu 2
\f[B]desktop\-window\-next\f[R]
.RS
.PP
Move the focus to the next tiled window.
.RE
.IP \(bu 2
\f[B]desktop\-window\-prev\f[R]
.RS
.PP
Move the focus to the previous tiled window.
.RE
.IP \(bu 2
\f[B]menu\-client\f[R]
.RS
.PP
Shows the list of X clients.
.RE
.IP \(bu 2
\f[B]menu\-desktop\f[R]
.RS
.PP
Show the list of active desktops.
.RE
.IP \(bu 2
\f[B]menu\-launcher\f[R]
.RS
.PP
Show the launcher menu as defined by the user.
.RE
.IP \(bu 2
\f[B]window\-close\f[R]
.RS
.PP
Closes the current window.
.RE
.IP \(bu 2
\f[B]window\-hide\f[R]
.RS
.PP
Hides the current window.
.RE
.IP \(bu 2
\f[B]window\-lower\f[R]
.RS
.PP
Lower the position of the current window in the stack.
(\f[I]stacked\f[R] windows only).
.RE
.IP \(bu 2
\f[B]window\-move\f[R]
.RS
.PP
Move the current window with the pointer.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-down\f[R]
.RS
.PP
Move the current window toward to the bottom of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-down\-left\f[R]
.RS
.PP
Move the current window toward to the bottom\-left corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-down\-right\f[R]
.RS
.PP
Move the current window toward to the bottom\-right corner of the
screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-left\f[R]
.RS
.PP
Move the current window toward to the left of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-right\f[R]
.RS
.PP
Move the current window toward to the right of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-up\f[R]
.RS
.PP
Move the current window toward to the top of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-up\-left\f[R]
.RS
.PP
Move the current window toward to the top\-left corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-up\-right\f[R]
.RS
.PP
Move the current window toward to the bottom\-left corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-move\-to\-desktop\-\f[BI]num\f[B]\f[R]
.RS
.PP
Moves the current window to the desktop \f[I]num\f[R].
(1 <= \f[I]num\f[R] <= 10)
.RE
.IP \(bu 2
\f[B]window\-raise\f[R]
.RS
.PP
Moves the current window to the top the stack.
(\f[I]stacked\f[R] windows only).
.RE
.IP \(bu 2
\f[B]window\-resize\f[R]
.RS
.PP
Resize the current window with the pointer.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-resize\-down\f[R]
.RS
.PP
Resize the current window toward the bottom.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-resize\-left\f[R]
.RS
.PP
Resize the current window toward the left.
(\f[I]stacked\f[R] window only)
.RE
.IP \(bu 2
\f[B]window\-resize\-right\f[R]
.RS
.PP
Resize the current window toward the right.
(\f[I]stacked\f[R] window only)
.RE
.IP \(bu 2
\f[B]window\-resize\-up\f[R]
.RS
.PP
Resize the current window toward the top.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-down\f[R]
.RS
.PP
Snap the current window to the bottom edge of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-down\-left\f[R]
.RS
.PP
Snap the current window to the bottom\-left corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-down\-right\f[R]
.RS
.PP
Snap the current window to the bottom\-right corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-left\f[R]
.RS
.PP
Snap the current window to the left edge of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-up\f[R]
.RS
.PP
Snap the current window to the top edge of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-up\-left\f[R]
.RS
.PP
Snap the current window to the top\-left corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-up\-right\f[R]
.RS
.PP
Snap the current window to the top\-right corner of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-snap\-right\f[R]
.RS
.PP
Snap the current window to the right edge of the screen.
(\f[I]stacked\f[R] windows only)
.RE
.IP \(bu 2
\f[B]window\-toggle\-fullscreen\f[R]
.RS
.PP
Toggles the fullscreen state of the current window.
.RE
.IP \(bu 2
\f[B]window\-toggle\-sticky\f[R]
.RS
.PP
Toggle the \f[I]sticky\f[R] state of the current window.
.RE
.IP \(bu 2
\f[B]window\-toggle\-tiled\f[R]
.RS
.PP
Toggle the \f[I]tiled\f[R]/\f[I]stacked\f[R] state of the current
window.
.RE
.SH DEFAULT BINDINGS
.SS Key bindings
.IP \(bu 2
\f[B]CM\-Return\f[R] \-> \f[I]terminal\f[R]
.IP \(bu 2
\f[B]CM\-r\f[R] \-> \f[I]restart\f[R]
.IP \(bu 2
\f[B]CM\-q\f[R] \-> \f[I]quit\f[R]
.IP \(bu 2
\f[B]M\-1\f[R] \-> \f[I]desktop\-select\-1\f[R]
.IP \(bu 2
\f[B]M\-2\f[R] \-> \f[I]desktop\-select\-2\f[R]
.IP \(bu 2
\f[B]M\-3\f[R] \-> \f[I]desktop\-select\-3\f[R]
.IP \(bu 2
\f[B]M\-4\f[R] \-> \f[I]desktop\-select\-4\f[R]
.IP \(bu 2
\f[B]M\-5\f[R] \-> \f[I]desktop\-select\-5\f[R]
.IP \(bu 2
\f[B]M\-6\f[R] \-> \f[I]desktop\-select\-6\f[R]
.IP \(bu 2
\f[B]M\-7\f[R] \-> \f[I]desktop\-select\-7\f[R]
.IP \(bu 2
\f[B]M\-8\f[R] \-> \f[I]desktop\-select\-8\f[R]
.IP \(bu 2
\f[B]M\-9\f[R] \-> \f[I]desktop\-select\-9\f[R]
.IP \(bu 2
\f[B]M\-0\f[R] \-> \f[I]desktop\-select\-10\f[R]
.IP \(bu 2
\f[B]CM\-Right\f[R] \-> \f[I]desktop\-next\f[R]
.IP \(bu 2
\f[B]CM\-Left\f[R] \-> \f[I]desktop\-prev\f[R]
.IP \(bu 2
\f[B]SM\-Right\f[R] \-> \f[I]desktop\-mode\-next\f[R]
.IP \(bu 2
\f[B]SM\-Left\f[R] \-> \f[I]desktop\-mode\-prev\f[R]
.IP \(bu 2
\f[B]M\-Tab\f[R] \-> \f[I]desktop\-window\-next\f[R]
.IP \(bu 2
\f[B]SM\-Tab\f[R] \-> \f[I]desktop\-window\-prec\f[R]
.IP \(bu 2
\f[B]SM\-1\f[R] \-> \f[I]window\-move\-to\-desktop\-1\f[R]
.IP \(bu 2
\f[B]SM\-2\f[R] \-> \f[I]window\-move\-to\-desktop\-2\f[R]
.IP \(bu 2
\f[B]SM\-3\f[R] \-> \f[I]window\-move\-to\-desktop\-3\f[R]
.IP \(bu 2
\f[B]SM\-4\f[R] \-> \f[I]window\-move\-to\-desktop\-4\f[R]
.IP \(bu 2
\f[B]SM\-5\f[R] \-> \f[I]window\-move\-to\-desktop\-5\f[R]
.IP \(bu 2
\f[B]SM\-6\f[R] \-> \f[I]window\-move\-to\-desktop\-6\f[R]
.IP \(bu 2
\f[B]SM\-7\f[R] \-> \f[I]window\-move\-to\-desktop\-7\f[R]
.IP \(bu 2
\f[B]SM\-8\f[R] \-> \f[I]window\-move\-to\-desktop\-8\f[R]
.IP \(bu 2
\f[B]SM\-9\f[R] \-> \f[I]window\-move\-to\-desktop\-9\f[R]
.IP \(bu 2
\f[B]SM\-0\f[R] \-> \f[I]window\-move\-to\-desktop\-10\f[R]
.IP \(bu 2
\f[B]SM\-f\f[R] \-> \f[I]window\-toggle\-fullscreen\f[R]
.IP \(bu 2
\f[B]SM\-s\f[R] \-> \f[I]window\-toggle\-sticky\f[R]
.IP \(bu 2
\f[B]SM\-t\f[R] \-> \f[I]window\-toggle\-tiled\f[R]
.IP \(bu 2
\f[B]SM\-i\f[R] \-> \f[I]window\-hide\f[R]
.IP \(bu 2
\f[B]SM\-x\f[R] \-> \f[I]window\-close\f[R]
.IP \(bu 2
\f[B]M\-Down\f[R] \-> \f[I]window\-lower\f[R]
.IP \(bu 2
\f[B]M\-Up\f[R] \-> \f[I]window\-raise\f[R]
.IP \(bu 2
\f[B]M\-h\f[R] \-> \f[I]window\-move\-left\f[R]
.IP \(bu 2
\f[B]M\-l\f[R] \-> \f[I]window\-move\-right\f[R]
.IP \(bu 2
\f[B]M\-j\f[R] \-> \f[I]window\-move\-down\f[R]
.IP \(bu 2
\f[B]M\-k\f[R] \-> \f[I]window\-move\-up\f[R]
.IP \(bu 2
\f[B]CM\-h\f[R] \-> \f[I]window\-snap\-left\f[R]
.IP \(bu 2
\f[B]CM\-l\f[R] \-> \f[I]window\-snap\-right\f[R]
.IP \(bu 2
\f[B]CM\-j\f[R] \-> \f[I]window\-snap\-down\f[R]
.IP \(bu 2
\f[B]CM\-k\f[R] \-> \f[I]window\-snap\-up\f[R]
.SS Mouse buttons bindings
.IP \(bu 2
\f[B]1\f[R] \-> \f[I]menu\-client\f[R]
.IP \(bu 2
\f[B]2\f[R] \-> \f[I]menu\-desktop\f[R]
.IP \(bu 2
\f[B]3\f[R] \-> \f[I]menu\-launcher\f[R]
.IP \(bu 2
\f[B]M+1\f[R] \-> \f[I]window\f[R]move_
.IP \(bu 2
\f[B]M+3\f[R] \-> \f[I]window\f[R]resize_
.IP \(bu 2
\f[B]M+4\f[R] \-> \f[I]window\f[R]lower_
.IP \(bu 2
\f[B]M+5\f[R] \-> \f[I]window\f[R]raise_
.SH SOCKETS
Command socket:
.RS
.PP
Commands can be sent programmatically to the window manager through a
UNIX socket.
The command socket is located at \(rs${XDG_CACHE_HOME}/zwm/socket All
window manager desktop functions are accepted.
These are the functions starting with \(dqdesktop\-\(dq.
The accepted format of the command is:
\(dq\f[I]screen\f[R]:\f[I]function\f[R]\(dq, where:
.RS
.PP
\f[I]screen\f[R] is the applicable X screen number \f[I]function\f[R]
the name of the window manager function.
Any message not complying with the format will be ignored.
.RE
.RE
.PP
Message socket:
.RS
.PP
The window manager can send status messages to a UNIX socket.
This can be useful for some programs such as status bars.
This is the list of message that can be sent by the window manager:
.RS
.IP \(bu 2
Change of active window title.
.RS 2
.RS
.PP
Format: \(dqwindow_active=\f[I]current title of active window\f[R]\(dq
.RE
.RE
.IP \(bu 2
Absence of active window.
.RS 2
.RS
.PP
Format: \(dqno_window_active=\(dq
.RE
.RE
.IP \(bu 2
Change of desktop mode.
.RS 2
.RS
.PP
Format: \(dqdesktop_mode=\f[I]desktop mode letter\f[R]\(dq
.RE
.RE
.IP \(bu 2
Change of active desktop list.
.RS 2
.RS
.PP
Format: \(dqdesktop_list=\f[I]space separated list of desktops
numbers\f[R]\(dq The active desktop number is prepended by \(aq*\(aq.
To activate this feature, set \f[I]message\-socket\f[R] to the path of
the destination socket in the configuration file.
Alternatively, use the \f[I]\-m\f[R] command line option to specify its
value.
If used, the command line option overrides the value defined in the
configuration file.
.RE
.RE
.RE
.RE
.SH FILES
If not specified at the command line, \f[B]zwm\f[R] read the
configuration file \f[I]\(ti/.config/zwm/config\f[R]
.SH BUGS
See GitHub Issues: \c
.UR https://github.com/cmanv/zwm/issues
.UE \c
.SH AUTHORS
cmanv.
